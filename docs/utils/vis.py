import os, random, glob, time, sys, math

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw, ImageFont


# split label
# e.g. '63루3348' -> ['6', '3', '루', '3', '3', '4', '8']
# e.g. '서울12가1234' -> ['서울', '1', '2', '가', '1', '2', '3', '4']
# e.g. 'A123B123' -> ['A', '1', '2', '3', 'B', '1', '2', '3']
def split_label(label):
    k_tmp = []
    split_label = []
    for i in label:
        if i.isdigit():
            if len(k_tmp) > 0:
                split_label.append(''.join(k_tmp))
                k_tmp = []
            split_label.append(i)
        else:
            k_tmp.append(i)
    return split_label


# gen label
def gen_label(img_path):
    img_name = os.path.basename(img_path).replace(' ', '').split('_')[0]
    label = split_label(img_name)
    txt_label = ''.join(label)

    # for i, char in enumerate(label):
    #     label[i] = label_dict[h2j(char)]

    return txt_label, label


# calculate the ratio of the given width and height
# resize the image to the given width or height and keep the ratio
def resize_image(image, width=256, height=128, inter=Image.Resampling.BICUBIC):
    _given_ratio = width / height
    _image_ratio = image.width / image.height
    if _image_ratio > _given_ratio:
        _new_width = width
        _new_height = int(width / _image_ratio)
    else:
        _new_height = height
        _new_width = int(height * _image_ratio)
    return image.resize((_new_width, _new_height), inter)


# show bbox on the image via PIL
# colors is a list of RGB tuple generated by given number of classes
def show_bbox(image, bboxes, labels, colors=None, font=None, bbox_width=2):
    if font is None:
        font = ImageFont.load_default(16)
    if colors is None:
        colors = [(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)) for _ in range(len(bboxes))]
    draw = ImageDraw.Draw(image)
    for i, bbox in enumerate(bboxes):
        x1, y1, x2, y2 = bbox
        draw.rectangle([x1-2, y1-2, x2+2, y2+2], outline=colors[i], width=bbox_width)
        label = labels[i]
        label_bbox = font.getbbox(label)
        font_width = (label_bbox[2] - label_bbox[0]) + bbox_width * 2
        font_height = (label_bbox[3] - label_bbox[1]) + bbox_width * 2
        draw.rectangle([x1, y1, x1 + font_width, y1 + font_height], fill=colors[i])
        draw.text((x1+bbox_width, y1-bbox_width), label, fill=(255, 255, 255), font=font)

    return image


# load txt file and return bbox
def load_bbox(txt_path):
    with open(txt_path, 'r') as f:
        lines = f.readlines()
    bboxes = []
    for line in lines:
        x1, y1, x2, y2 = map(int, line.strip().split(' '))
        bboxes.append([x1, y1, x2, y2])
    return bboxes


if __name__ == '__main__':
    # image_path = 'docs/300x200.png'
    # image = Image.open(image_path)
    # image = resize_image(image, 256, 128)

    # bboxes = [[10, 10, 100, 100], [120, 120, 200, 200]]
    # labels = ['person', 'car']
    # font = ImageFont.load_default(16)
    
    font = ImageFont.truetype('docs/Freesentation-4Regular.ttf', 12)
    # image = show_bbox(image, bboxes, labels, font=font)

    # image.show()

    paths = glob.glob('/Users/haoyu/Documents/datasets/lpr/train/*.jpg')
    # shuffle
    random.shuffle(paths)
    # sample 20 images
    paths = paths[:20]

    for idx, path in enumerate(paths):
        image = Image.open(path).convert('RGB')
        raw_width, raw_height = image.size
        image = resize_image(image, 256, 128)
        resize_width, resize_height = image.size
        txt_path = path.replace('.jpg', '.txt')
        bboxes = load_bbox(txt_path)
        # bbox resize
        for i, bbox in enumerate(bboxes):
            x1, y1, x2, y2 = bbox
            x1 = int(x1 * resize_width / raw_width)
            y1 = int(y1 * resize_height / raw_height)
            x2 = int(x2 * resize_width / raw_width)
            y2 = int(y2 * resize_height / raw_height)
            bboxes[i] = [x1, y1, x2, y2]

        txt_label, label = gen_label(path)

        image = show_bbox(image, bboxes, label, font=font)
        # save as txt_label.jpg
        image.save(f'docs/{txt_label}.jpg')
        # image.show()
        # break
